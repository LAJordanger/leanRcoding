% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nested_if.R
\name{nested_if}
\alias{nested_if}
\title{Simplify the treatment of recursive/nested \code{if}-statements.}
\usage{
nested_if(if_list = list(), expr_all_TRUE = TRUE,
  expr_not_all_TRUE = invisible(NULL), env = parent.frame())
}
\arguments{
\item{if_list}{A list of the statements we want to test, default
value \code{list()}.}

\item{expr_all_TRUE}{The result to return if the nested structure
turns out to contain well defined stuff that passes the tests.
The default value for this is \code{TRUE}.}

\item{expr_not_all_TRUE}{The result to return if it turns out that
something goes wrong (not defined, or false statements).  The
default value for this is \code{NULL}.}

\item{env}{The environment at which the statements should be
evaluated, the default value is \code{parent.frame()}}
}
\value{
The result will be \code{TRUE} if all the statements given
    in \code{if_list} is \code{TRUE}, otherwise the result will be
    \code{FALSE}.  The result will be \code{FALSE} if
    \code{if_list} has length zero.
}
\description{
Recursive/nested \code{if}-statements can pop up when the latter
statements need the former statements to be true in order to be
well-defined, in which case it might be rather messy to formulate
an "all-must-be-TRUE" statement.  Such nested \code{if}-statements
can e.g. occur when inspecting objects stored in recursive lists
where different branches can have quite different structures, in
which case any statement regarding a given \code{level} of a
\code{list} must be preceeded by a test of the kind
\code{!identical(list$level, NULL)}.
}

