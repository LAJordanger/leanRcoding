% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/update_array.R
\name{update_array}
\alias{update_array}
\title{Update an array with a sub-array.}
\usage{
update_array(.arr, .sub_arr, .env = parent.frame())
}
\arguments{
\item{.arr}{The array we want to update.  The code in its present
incarnation requires an array with a full set of unique
dimension-names, although I suppose it could be possible to extend
to a case where the dimension-names are missing too.}

\item{.sub_arr}{Tue sub-array we want to insert into \code{.arr}.
The dimension-names of \code{.sub_arr} must be contained in those
of \code{.arr}, but they do not need to be given in the same
order.}

\item{.env}{An environment in which \code{.arr} will be updated.
The default value is the environment of the calling function.}
}
\value{
The result will depend on how \code{.sub_arr} and
\code{.arr} is related.  If the dimension-names of \code{.sub_arr}
is contained in those of \code{.arr}, but its dimension is in fact
smaller, then the result will be that \code{.arr} will be filled
with copies of \code{.sub_arr} along the unspecified dimensions. If
the dimensions are equal, then only those components in \code{.arr}
that directly match the dimension-names of \code{.sub_arr} will be
affected.
}
\description{
This function will update an array with a sub-array, without any
need for the user to worry about the dimension-names.
}
\details{
Arrays are awesome, but it can alas be agonising to keep
track of the dimension-names.  This function frees the user from
such frustrations.
}

