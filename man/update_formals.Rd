% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/update_formals.R
\name{update_formals}
\alias{update_formals}
\title{Update the formals of a function}
\usage{
update_formals(.fun, ..., .list = FALSE)
}
\arguments{
\item{.fun}{The targeted function whose formals should be updated.
Warning: If the function belongs to the same environment, then
the update will be permanent, whereas a local copy (with
adjusted formals) will be created otherwise.}

\item{...}{The arguments to be used when updating the formals of
\code{.fun}.}

\item{.list}{A logical value, default \code{FALSE}.  This can be
used when the stuff that you want to update with already is
contained in a list or an environment. NOTE: Only the first
argument given to \code{...} will in this case be recorded!}
}
\value{
The result of this function is that the formals of
    \code{.fun} is updated in the calling environment.  If the
    targeted function is defined outside of this environment, a
    local copy will be created.  This might trigger some "bad"
    behaviour, and it might be safer to use a construction based on
    \code{crate_call} instead.
}
\description{
Update the formals of a function
}
\details{
The \code{dotsMethods}, i.e.  \code{...}, allows
    inheritance of arguments from a parent function to its
    children.  But if several children require different arguments
    passed to them, some minor problems can occur (unless all of
    the children have \code{...} as an argument in order to work as
    a sink for superfluous arguments).  This function attempts to
    avoid those problems (for functions without \code{dotsMethods}
    by comparing the formals of the targeted child-function with
    the content captured in the \code{dotsMethods}, whereupon it
    updates any common components and ignores the part of
    \code{...} that has no relevance.
}

