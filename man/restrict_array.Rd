% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/restrict_array.R
\name{restrict_array}
\alias{restrict_array}
\title{Restrict (or permute) an array.}
\usage{
restrict_array(.arr, .restrict, .drop = FALSE, .never_drop = NULL,
  .keep_attributes = TRUE, .permute = FALSE)
}
\arguments{
\item{.arr}{The array we want to restrict.  The code in its present
incarnation requires an array with a full set of unique
dimension-names, although I suppose it could be possible to
extend to a case where the dimension-names are missing too.}

\item{.restrict}{A named \code{list} that collects the arguments to
be used in the restriction, i.e. the names should correspond to
names of the dimension-names, and the values should specify a
subset (or a permutation, if you are so inclined) of the
dimension-names.}

\item{.drop}{A logical argument, default value \code{FALSE}, that
decides whether or not dimensions are allowed to drop.}

\item{.never_drop}{A character vector to be used if \code{.drop} is
\code{TRUE}, but some dimensions should be protected.  The
default value \code{NULL} does nothing, whereas the argument
will be ignored if \code{.drop} is \code{FALSE}.}

\item{.keep_attributes}{A logical argument, default value
\code{TRUE}, that decides whether or not attributes should be
kept after the restriction.  Note that relevant \code{class}
attributes are kept by default, and that \code{dim} and
\code{dimnames} must be as specified by the restriction.}

\item{.permute}{A logical argument, default value \code{FALSE},
that will decide whether or not the dimensions of the final
array should be adjusted to one used by \code{.restrict}.}
}
\value{
The result will depend on how \code{.sub_arr} and
\code{.arr} is related.  If the dimension-names of \code{.sub_arr}
is contained in those of \code{.arr}, but its dimension is in fact
smaller, then the result will be that \code{.arr} will be filled
with copies of \code{.sub_arr} along the unspecified dimensions. If
the dimensions are equal, then only those components in \code{.arr}
that directly match the dimension-names of \code{.sub_arr} will be
affected.
}
\description{
This function will restrict an array based upon a specified subset
of its dimension-names, without any need for the user to worry
about how these dimension-names are positioned within the array.
However, if the user desires that the resulting array should have
the specified order on the dimension-names, then the argument
\code{.permute} can be set to \code{TRUE} in order to achieve that
result.
}
\details{
Arrays are awesome, but it can alas be agonising to keep
    track of the dimension-names.  This function frees the user
    from such frustrations.
}

